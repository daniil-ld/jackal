<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="keywords" content="Jackal, Game">
    <meta name="description" content="Jackal Game">
    <link rel="icon" href="~/favicon.ico?20417786499" type="image/x-icon">
    <title>Jackal</title>
    @Styles.Render("~/bundle/styles")
    @Scripts.Render("~/bundle/scripts")

    <script src="~/Scripts/Chart.min.js"></script>

    <style>

        body { width: 100%; }
        .dice_img {width: 100%; height: 100%; }
        #js-button-dice { background-color: lightgray; }
       
    </style>

</head>
<body>
    <div class="container col-xs-12 col-lg-2">

        <div id="js-button-dice" class="row">
            <div class="row">
                <div class="col-xs-6" style="padding: 15px;">
                    <img id="js-first-dice" class="dice_img"  />
                </div>
                <div class="col-xs-6" style="padding: 15px;">
                    <img id="js-second-dice" class="dice_img" />
                </div>
            </div>

            <div class="row text-center">
                <span id="js-sum-dice" style="font-size: 120px;"></span>
            </div>
        </div>

        <div class="row">

            <button class="js-calc-chart">100</button>
            <button class="js-calc-chart">1000</button>
            <button class="js-calc-chart">10000</button>
            <button class="js-calc-chart">100000</button>
            <button class="js-calc-chart">1000000</button>
            <canvas id="myChart" class="col-xs-12" height="400"></canvas>

        </div>
    </div>

    <script>

        var myLineChart = null;

        $(document).ready(function () {

            $('#js-button-dice').click(rollDice);

            $('.js-calc-chart').click(function () {

                if (myLineChart == null) {
                    myLineChart = createChart(getChartData(parseInt($(this).text())));
                }
                else {
                    var arr = getChartData(parseInt($(this).text()));
                    for (var i = 0 ; i < arr.length; ++i) {
                        myLineChart.datasets[0].points[i].value = arr[i];
                    }
                    myLineChart.update();
                }
            });

            rollDice();
        });


        function rollDice() {

            var dg = getRandomInt(1, 6);
            updateDice($('#js-first-dice'), dg);
            var dg2 = getRandomInt(1, 6);
            updateDice($('#js-second-dice'), dg2);

            $('#js-sum-dice').text(dg + dg2)
        }

        function updateDice(elm, digit) {

            elm.attr('src', '/Content/Pictures/dice_' + digit + '.png');
        }

        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }


        function createChart(chartdata) {

            var options = {

                ///Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,

                //String - Colour of the grid lines
                scaleGridLineColor: "rgba(0,0,0,.05)",

                //Number - Width of the grid lines
                scaleGridLineWidth: 1,

                //Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,

                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,

                //Boolean - Whether the line is curved between points
                bezierCurve: true,

                //Number - Tension of the bezier curve between points
                bezierCurveTension: 0.4,

                //Boolean - Whether to show a dot for each point
                pointDot: true,

                //Number - Radius of each point dot in pixels
                pointDotRadius: 4,

                //Number - Pixel width of point dot stroke
                pointDotStrokeWidth: 1,

                //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
                pointHitDetectionRadius: 20,

                //Boolean - Whether to show a stroke for datasets
                datasetStroke: true,

                //Number - Pixel width of dataset stroke
                datasetStrokeWidth: 2,

                //Boolean - Whether to fill the dataset with a colour
                datasetFill: true,

                //String - A legend template
                legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"

            };

            var ctx = document.getElementById("myChart").getContext("2d");


            var data = {
                labels: ["2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
                datasets: [
                    {
                        label: "My First dataset",
                        fillColor: "rgba(220,220,220,0.2)",
                        strokeColor: "rgba(220,220,220,1)",
                        pointColor: "rgba(220,220,220,1)",
                        pointStrokeColor: "#fff",
                        pointHighlightFill: "#fff",
                        pointHighlightStroke: "rgba(220,220,220,1)",
                        data: chartdata
                    }
                ]
            };

            return new Chart(ctx).Line(data, options);

        }

        function getChartData(num) {

            var ret = [0,0,0,0,0,0,0,0,0,0,0];

            for (var i = 0 ; i < num ; ++i) {
                var dg = getRandomInt(1, 6);
                var dg2 = getRandomInt(1, 6);

                ret[dg + dg2 - 2]++;
            }

            return ret;
        }
    </script>
</body>
</html>
