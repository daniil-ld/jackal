@{
    ViewBag.Title = "Game";
}

    <style type="text/css">
        #map {float: left;}
        #map table td {width: 50px; height: 50px; border: 1px black solid; vertical-align: top; background-size: cover;}
        table td .coins {width: 15px; height: 15px; float: right; color: black; position: relative; }
        table td .pirates {width: 15px; height: 15px; float: left; color: white; }

        .controls { width: 200px; float: right; }
        #teams div { width: 100%; color: white; }
        .controls button { width: 100% }

        .level-21 { position: absolute; margin-top: 35px; }
        .level-20 { position: absolute; margin-left: 35px; }

        .level-32 { position: absolute; margin-top: 35px; margin-left: 35px; }
        .level-31 { position: absolute; margin-top: 15px; margin-left: 5px;}
        .level-30 { position: absolute; margin-left: 35px; }

        .level-43 { position: absolute; margin-top: 35px; margin-left: 35px; }
        .level-42 { position: absolute; margin-top: 25px; }
        .level-41 { position: absolute; margin-top: 10px; margin-left: 25px;}
        .level-40 { position: absolute; }

        .level-54 { position: absolute; margin-left: 35px; }
        .level-53 { position: absolute; margin-left: 15px;}
        .level-52 { position: absolute; margin-top: 15px; }
        .level-51 { position: absolute; margin-top: 35px; margin-left: 5px; }
        .level-50 { position: absolute; margin-top: 35px; margin-left: 35px; }

    </style>

<h2>Game</h2>

<div style="width: 1024px">
<div class="controls">

    <div id="gamename"></div>
    <div id="counter">0</div>

    <div id="teams"></div>

    <button id="game">start</button>
    <button id="reset">reset</button>
    <button id="next">next</button>

</div>
<div id="map"></div>
</div>

<script type="text/javascript">


    var gamestate = 'stop';
    var gamename = null;
    var map;
    var groups;
    var gamehandler;

    $(document).ready(function () {

        $('#game').click(function () {

            if (gamestate == 'stop') {

                if (gamename == null) {

                    $.post("/Game/Start", null, function (data) {

                        gamename = data.gamename;
                        $('#gamename').text(gamename);

                        groups = new Teams(data.teams);

                        map = new Map(data.map.Width, data.map.Height);
                        RedrawMap(data.map.Changes);
                        
                        gameStart();

                    });
                }
                else gameStart();

            } else if (gamestate == 'start') {

                gamestate = 'stoping';
                $('#game').text('wait');
            }

        });

        $('#reset').click(function () {

            gameReset();
        });


        $('#next').click(function () {

            $.post("/Game/Turn", null, function (data) {

                $('#counter').text(data.turn);

                RedrawMap(data.changes);
                RedrawStat(data.teams);
            });


        });

    });


    function gameReset() {

        if (gamestate == 'start') {

            gamestate = 'stoping';
            $('#game').text('wait');
            setTimeout(gameReset, 500);
        }
        else {
            $.post("/Game/Reset", null, function (data) {

                gamename = null;
                $('#gamename').text('');

                var mapElm = $('#map');
                if (typeof (mapElm) != 'undefined')
                    mapElm.html('');

                var teamsElm = $('#teams');
                if (typeof (teamsElm) != 'undefined')
                    teamsElm.html('');

            });
        }
    }


    function gameStart()
    {
        gamestate = 'start';
        $('#game').text('pause');
        setTimeout(gameTurn, 250);
    }

    function gameTurn()
    {
        if (gamestate == 'stoping') {

            gamestate = 'stop';
            $('#game').text('start');
            return;
        }

        $.post("/Game/Turn", null, function (data) {

            $('#counter').text(data.turn);

            RedrawMap(data.changes);
            RedrawStat(data.teams);

            setTimeout(gameTurn, 250);
        });

    }


    /// ===========================
    /// Отображение карты на экране
    /// ===========================
    function Map(width, height) {

        this.width = width;
        this.height = height;

        var mapElm = $('#map');
        if (typeof (mapElm) == 'undefined') return;

        this.fields = {};
        for (var i = 0; i < this.width; i++) {
        	this.fields[i] = {};
        	for (var j = 0; j < this.height; j++) {
        		this.fields[i][j] = { isUnknown: true };
	        }
        }

        var table = $('<table style="border: 1px black solid;"></table>');
        mapElm.append(table);
        for (var j = (this.height - 1); j >= 0 ; j--) {
            var tr = $('<tr></tr>');
            table.append(tr);
            for (var i = 0; i < this.width; i++) {
            	var td = $('<td></td>');
            	var lev = $('<div />');
                var coins = $('<div class="coins" />');
                var pirates = $('<div class="pirates" />');
	            td.append(lev);
	            lev.append(coins);
	            lev.append(pirates);
	            this.fields[i][j].location = td;
	            this.fields[i][j][0] = {
                	location: lev,
                    coins: coins,
                    pirates: pirates
                };
                tr.append(td);
            }
        }
    }


    function RedrawMap(changes) {

        for (var index in changes) {

        	
	        
            var each = changes[index];
            var field = map.fields[each.X][each.Y];

            if (!each.IsUnknown && field.isUnknown) {

                field[0].location.addClass('level-' + each.Levels.length + '0');

            	field.isUnknown = false;
            	if (each.Levels.length > 1) {

            	    for (var lindex in each.Levels) {
            	        if (lindex > 0) {
            	            var lev = $('<div class="level-' + each.Levels.length + lindex + '" />');
            	            var coins = $('<div class="coins" />');
            	            var pirates = $('<div class="pirates" />');
            	            field.location.append(lev);
            	            lev.append(coins);
            	            lev.append(pirates);
            	            field[lindex] = {
            	                location: lev,
            	                coins: coins,
            	                pirates: pirates
            	            };
            	        }
            	    }
            	}
            }

            if (each.BackgroundImageSrc != null)
                field.location.css('backgroundImage', 'url(' + each.BackgroundImageSrc + ')');
            else {
                field.location.css('backgroundImage', '');
                field.location.css('backgroundColor', each.BackgroundColor);
            }

            if (each.Rotate == 1) {
                field.location.css('transform', 'rotate(90deg)');
            } else if (each.Rotate == 2) {
                field.location.css('transform', 'rotate(180deg)');
            } else if (each.Rotate == 3) {
                field.location.css('transform', 'rotate(270deg)');
            }



            for (var lindex in each.Levels) {

	            var level = field[lindex];

	            var lev = each.Levels[lindex];
		        if (lev.hasPirates) {

		        	level.pirates.css('backgroundColor', lev.Pirate.BackColor);
		        	level.pirates.text(lev.Pirate.Text);
		        } else {

		        	level.pirates.css('backgroundColor', '');
		        	level.pirates.text('');
		        }

		        if (lev.hasCoins) {
		        	level.coins.css('backgroundColor', lev.Coin.BackColor);
		        	level.coins.text(lev.Coin.Text);
		        } else {

		        	level.coins.css('backgroundColor', '');
		        	level.coins.text('');
		        }
            }

        }
    }


    function RedrawStat(teams) {

        for (var index=0 ; index < teams.length ; index++) {
            var team = teams[index];

            groups.teams[team.id].elm.text(team.Text);
        }
    }

    /// ===========================
    /// Отображение карты на экране
    /// ===========================
    function Teams(teams) {

        var teamsElm = $('#teams');
        if (typeof (teamsElm) == 'undefined') return;

        this.teams = {};

        for (var index in teams) {

            var team = teams[index];
            var elm = $('<div />');
            elm.css('backgroundColor', team.BackColor);

            this.teams[team.id] = {
                elm: elm,
            };
            teamsElm.append(elm);
        }
    }



</script>