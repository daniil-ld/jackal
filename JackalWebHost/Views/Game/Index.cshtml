@{
    ViewBag.Title = "Game";
}

<style type="text/css">
        body {
            background-color: lightgray;
        }
        #map {float: left;}
        #map table td {width: 50px; height: 50px; border: 1px black solid; vertical-align: top; padding: 0px; }
		#map table { border-collapse: separate; border-spacing: 2px; box-sizing: border-box; }
        table td .coins {width: 15px; height: 15px; float: right; color: black; position: relative; z-index: 5;}
        table td .pirates {width: 15px; height: 15px; float: left; color: white; z-index: 5;}

        .controls { width: 200px; }
        #teams div { color: white; }
        .controls button { width: 100% }

        .back { position: absolute; width: 50px; height: 50px; background-size: cover; border-width: 0px; z-index: 0;}

        .level { position: absolute; width: 50px; z-index: 3; }
        .level-10 { position: absolute; width: 50px; z-index: 3;}

        .level-21 { position: absolute; margin-top: 35px; z-index: 3;}
        .level-20 { position: absolute; margin-left: 35px; z-index: 3;}

        .level-32 { position: absolute; margin-top: 35px; margin-left: 35px; z-index: 3;}
        .level-31 { position: absolute; margin-top: 15px; margin-left: 5px; z-index: 3;}
        .level-30 { position: absolute; margin-left: 35px; z-index: 3;}

        .level-43 { position: absolute; margin-top: 35px; margin-left: 35px; z-index: 3;}
        .level-42 { position: absolute; margin-top: 25px; }
        .level-41 { position: absolute; margin-top: 10px; margin-left: 25px; z-index: 3;}
        .level-40 { position: absolute; }

        .level-54 { position: absolute; margin-left: 35px; z-index: 3;}
        .level-53 { position: absolute; margin-left: 15px; z-index: 3;}
        .level-52 { position: absolute; margin-top: 15px; z-index: 3;}
        .level-51 { position: absolute; margin-top: 35px; margin-left: 5px; z-index: 3;}
        .level-50 { position: absolute; margin-top: 35px; margin-left: 35px; z-index: 3;}


		.digit_1 {
			background-image: url(/Content/Pictures/digits_small.jpg);
		}
		.digit_2 {
			background-image: url(/Content/Pictures/digits_small.jpg);
			background-position: 51px 0px;
		}

		.digit_3 {
			background-image: url(/Content/Pictures/digits_small.jpg);
			background-position: 0px -51px;
		}
		
		.digit_4 {
			background-image: url(/Content/Pictures/digits_small.jpg);
			background-position: 51px -51px;
		}

		.digit_5 {
			background-image: url(/Content/Pictures/digits_small.jpg);
			background-position: 0px -102px;
		}

		.human {
			background-image: url("/Content/Pictures/human.png");
			background-repeat: no-repeat;
			width: 50px;
			height: 50px;
			margin: 0;
			padding: 0;
		}

		.robot {
			background-image: url("/Content/Pictures/robot.png");
			background-repeat: no-repeat;
			width: 50px;
			height: 50px;
			margin: 0;
			padding: 0;
		}

		.robot2 {
			background-image: url("/Content/Pictures/robot2.png");
			background-repeat: no-repeat;
			width: 50px;
			height: 50px;
			margin: 0;
			padding: 0;
		}

        .bs-panel-control, .bs-panel-statistics, .bs-panel-pirate {
            background-color: white;
            border-color: gray;
            border-style: solid;
            border-width: 1px;
            border-radius: 4px;
            margin: 0 -15px 15px;
            padding: 45px 15px 15px;
            position: relative;
        }
        .bs-panel-control:after, .bs-panel-statistics:after, .bs-panel-pirate:after {
            color: #959595;
            font-size: 12px;
            font-weight: 700;
            left: 15px;
            letter-spacing: 1px;
            position: absolute;
            text-transform: uppercase;
            top: 15px;
        }

        .bs-panel-control:after {
            content: "Управление";
        }
        .bs-panel-statistics:after {
            content: "Статистика";
        }

        .bs-panel-pirate:after {
            content: "Подсветка хода";
        }

</style>

<div class="col-md-offset-1">
<h2>Остров сокровищ</h2>
</div>
<br/>
<br/>
<div style="width: 100%;">
    <div class="center-block" style="width: 1000px;">
        <div id="map"></div>
<div class="controls center-block">

    <div class="bs-panel-statistics" style="display: none;">
        <div>Код игры: <span id="gamename"></span></div>
        <div>Код карты: <span id="mapcode"></span></div>
        <div>Номер хода: <span id="counter"></span></div>
        <div style="margin: 15px 15px 0 15px;">
            <div id="teams"></div>
        </div>
    </div>
    <div id="end-game-alert" class="alert alert-danger" style="display: none;"></div>
    <div class="bs-panel-control">
        <button id="game" class="btn btn-default">Начать</button>
        <button id="next" class="btn btn-default">Следующий ход</button>
        <hr/>
        <button id="reset" class="btn btn-default">Заново</button>
    </div>
    <br/>
	<div class="bs-panel-pirate" style="display: none;">
        <div id="first-pirate" class="input-group">
          <span class="input-group-addon">
            <input  type="radio" name="piratesChoice" value="1" />
          </span>
          <input type="text" class="form-control" value="1-ый пират" disabled="disabled" />
        </div><!-- /input-group -->
        <div id="second-pirate" class="input-group">
          <span class="input-group-addon">
            <input  type="radio" name="piratesChoice" value="2" />
          </span>
          <input type="text" class="form-control" value="2-ой пират" disabled="disabled" />
        </div><!-- /input-group -->
        <div id="third-pirate" class="input-group">
          <span class="input-group-addon">
            <input  type="radio" name="piratesChoice" value="3" />
          </span>
          <input type="text" class="form-control" value="3-ий пират" disabled="disabled" />
        </div><!-- /input-group -->
        <hr/>
        <div id="with-coin-checkbox" class="input-group">
          <span class="input-group-addon">
            <input id="with-coin" type="checkbox">
          </span>
          <input type="text" class="form-control" value="С монетой" disabled="disabled" />
        </div><!-- /input-group -->
	</div>
</div>
       </div>
</div>

<div class="modal fade" id="preparing-file-modal" data-backdrop="static" data-keyboard="false">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h4 class="modal-title">Начать игру</h4>
			</div>
			<div class="modal-body">
				<div id="player-choose-menu" class="center-block" style="width: 250px; height: 250px; position: relative;">
                    <div class="robot" style="position: absolute; top: 200px; left: 100px; cursor: pointer;" ></div>
					<div class="robot2" style="position: absolute; top: 100px; left: 0px; cursor: pointer;" ></div>
                    <div class="robot" style="position: absolute; top: 0px; left: 100px; cursor: pointer;" ></div>
					<div class="robot2" style="position: absolute; top: 100px; left: 200px; cursor: pointer;" ></div>
				</div>
				<button id="start-button-modal" class="btn btn-primary" type="submit">Начать</button>
			</div>
		</div><!-- /.modal-content -->
	</div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<script type="text/javascript">


    var gamestate = 'stop';
    var gamename = null;
    var map;
    var groups;
    var gamehandler;
    var isHumanStep = false;
    var curTeam = 0;
    var humanTeams = {};

    $(document).ready(function () {

    	$('#player-choose-menu div').click(function () {
    		if ($(this).hasClass('human')) {
    			$(this).removeClass();
    			$(this).addClass('robot');
    		} else if ($(this).hasClass('robot')) {
    			$(this).removeClass();
    			$(this).addClass('robot2');
    		} else {
    			$(this).removeClass();
    			$(this).addClass('human');
    		}
    	});

    	$('#start-button-modal').click(function () {
    		var preparingFileModal = $("#preparing-file-modal");
    		preparingFileModal.modal('toggle');

    		var players = $('#player-choose-menu div');
    		//var print = '';
    		//for (var i = 0 ; i < players.length ; i++) {
    		//	print += $(players[i]).attr('class') + ' ';
    		//}
    		var input = [];
    		for (var i = 0; i < players.length; i++) {
    			input.push($(players[i]).attr('class'));
    		}
    		


    		$.post("/Game/Start", { players: JSON.stringify(input) }, function (data) {

    			gamename = data.gamename;
    			$('#gamename').text(gamename);
    			$('#mapcode').text(data.mapId);

    			$('.bs-panel-statistics').show();
    			$('.bs-panel-pirate').show();
    			$('#end-game-alert').hide();

    			$('.controls').removeClass('center-block').addClass('col-md-3')
    			$('#map').addClass('col-md-9');

    			groups = new Teams(data.teams);

    			map = new Map(data.map.Width, data.map.Height);
    			RedrawMap(data.map.Changes);

    			gameStart();

    		});
    	});

        $('#game').click(function () {

            if (gamestate == 'stop') {

                if (gamename == null) {

                	var preparingFileModal = $("#preparing-file-modal");
                	preparingFileModal.modal('toggle');
                }
                else gameStart();

            } else if (gamestate == 'start') {

                gamestate = 'stoping';
                $('#game').text('Ожидаем ...');
            }

        });

        $('#reset').click(function () {

            gameReset();
        });


        $('#next').click(function () {

            MakeTurn();

        });

        $('#with-coin').change(function () {

            DrawPirateAvailableMoves($('input[name=piratesChoice]:checked').val());

            if (!isHumanStep) return;
            curTeam.withCoin = $(this).is(':checked');
	    });

	    $('input[name=piratesChoice]').change(function() {

	        //alert($(this).val());
		    DrawPirateAvailableMoves($(this).val());

		    if (!isHumanStep) return;
		    curTeam.pirate = $(this).val();
	    });
    });


    function MakeTurn(moveNum) {

        $.post("/Game/Turn", { turnNum: moveNum }, function (data) {

            if (data.isGameOver) {

                var elm = $('#end-game-alert');
                elm.text('Игра закончена. Победил ' + GetWinner(data.teams));
                elm.show();
                return;
            }

            UndrawMoves();

            $('#counter').text(data.turn);

            RedrawMap(data.changes);
            RedrawStat(data.teams);

            SetPirateTeamInfo(data);

            if (!data.isHuman && (gamestate == 'start')) {
                setTimeout(gameTurn, 250);
            }
        });
    }

    function SetPirateTeamInfo(data) {

        isHumanStep = data.isHuman;

        var team = humanTeams[data.curTeam];
        if (team == null) {
            team = {
                pirate: 1,
                withCoin: false
            }
            humanTeams[data.curTeam] = team;
        }


        curTeam = team;

        var available = GetPiratesAvailability(data.moves);
        if (available[team.pirate - 1]) {
            $('input[name=piratesChoice][value=' + team.pirate + ']').prop('checked', true);
            $('#with-coin').prop('checked', team.withCoin);
            DrawPirateAvailableMoves(curTeam.pirate);
        }
        else {
            $('input[name=piratesChoice][value=1]').prop('checked', true);
            $('#with-coin').prop('checked', team.withCoin);
            DrawPirateAvailableMoves(1);
        }
    }

	function DrawPirateAvailableMoves(num) {

	    var withCoin = false;
	    for (index = 0 ; index < moves.length ; index++) {
	        var mv = moves[index];
	        if ((mv.From.PirateNum == num) && (mv.WithCoin)) {
	            withCoin = true;
	            break;
	        }
	    }

	    if (!withCoin) {
	        $('#with-coin').prop('checked', false);
	        $('#with-coin-checkbox').hide();
	    }
	    else {
	        $('#with-coin-checkbox').show();
	    }

	    if (withCoin) withCoin = $('#with-coin').prop('checked');


		for (var index = 0; index < moves.length; index++) {

			var move = moves[index];
			var fld = map.fields[move.To.X][move.To.Y];
			
			if (fld.locsize == 1) {
				fld.back.css('opacity', '1');
			} else {
				fld.location.removeClass('digit_' + (fld.locsize - move.To.Level));
				fld.back.css('opacity', '1');
			}
		}

		//alert('num = ' + num);
		for (index = 0 ; index < moves.length ; index++) {

			move = moves[index];
			fld = map.fields[move.To.X][move.To.Y];
			var level = fld[move.To.Level];

			if (move.From.PirateNum == num) {

				if (withCoin && !move.WithCoin)
					continue;
					
				if (fld.locsize == 1) {
					fld.back.css('opacity', '0.5');
				} else {
					fld.location.addClass('digit_' + (fld.locsize - move.To.Level));
					fld.back.css('opacity', '0.5');
				}
			}

		}
	}

	function UndrawMoves() {

		while (moves.length > 0) {
			var move = moves.pop();
			var fld = map.fields[move.To.X][move.To.Y];
			if (fld.locsize == 1) {
				fld.back.css('opacity', '1');
			} else {
				fld.location.removeClass('digit_' + (fld.locsize - move.To.Level));
				fld.back.css('opacity', '1');
			}
		}
	}

    function gameReset() {

        if (gamestate == 'start') {

            gamestate = 'stoping';
            $('#game').text('Ожидаем');
            setTimeout(gameReset, 500);
        }
        else {
            $.post("/Game/Reset", null, function (data) {

                gamename = null;
                $('#gamename').text('');
                $('#game').text('Начать');

                $('.bs-panel-statistics').hide();
                $('.bs-panel-pirate').hide();
                $('#end-game-alert').hide();

                $('.controls').removeClass('col-md-3').addClass('center-block')
                $('#map').removeClass('col-md-9');

                var mapElm = $('#map');
                if (typeof (mapElm) != 'undefined')
                    mapElm.html('');

                var teamsElm = $('#teams');
                if (typeof (teamsElm) != 'undefined')
                    teamsElm.html('');

            });
        }
    }


    function gameStart()
    {
        gamestate = 'start';
        $('#game').text('Остановить');
        setTimeout(gameTurn, 250);
    }

    function gameTurn()
    {
        if (gamestate == 'stoping') {

            gamestate = 'stop';
            $('#game').text('Продолжить');
            return;
        }

        MakeTurn();
    }
    

    /// ===========================
    /// Отображение карты на экране
    /// ===========================
    function Map(width, height) {

        this.width = width;
        this.height = height;

        var mapElm = $('#map');
        if (typeof (mapElm) == 'undefined') return;

        this.fields = {};
        for (var i = 0; i < this.width; i++) {
        	this.fields[i] = {};
        	for (var j = 0; j < this.height; j++) {
        		this.fields[i][j] = { isUnknown: true };
	        }
        }

        var table = $('<table style="border: 1px black solid;"></table>');
        mapElm.append(table);
        for (var j = (this.height - 1); j >= 0 ; j--) {
            var tr = $('<tr></tr>');
            table.append(tr);
            for (var i = 0; i < this.width; i++) {
                var td = $('<td></td>');
                var back = $('<div class="back" />');
	            
            	// обработчик щелчка пользователя
	            back.click(makeUserHandler(i, j));

            	var lev = $('<div class="level" />');
                var coins = $('<div class="coins" />');
                var pirates = $('<div class="pirates" />');
                td.append(lev);
                td.append(back);
	            lev.append(coins);
	            lev.append(pirates);
	            this.fields[i][j].location = td;
	            this.fields[i][j].locsize = 1;
	            this.fields[i][j].back = back;
	            this.fields[i][j][0] = {
                	location: lev,
                    coins: coins,
                    pirates: pirates
                };
                tr.append(td);
            }
        }
    }


	/// ==============================
	/// Обработчик щелчка пользователя
	/// ==============================
    var makeUserHandler = function (i, j) {
    	return function () {   
    		if (!isHumanStep) return;

    		for (var index = 0; index < moves.length; index++) {

    		    var move = moves[index];
    		    var curpirate = $('input[name=piratesChoice]:checked').val();
    		    if ((move.To.X == i) && (move.To.Y == j) && (curpirate == move.From.PirateNum)) {

    				// есть ход
    				if ($('#with-coin').prop('checked') && !move.WithCoin)
    					continue;

    				MakeTurn(move.MoveNum);

    				//alert('есть ход');
    				return;
    			}
    		}
    		alert('нет хода');
    	};
    };

    function RedrawMap(changes) {

        for (var index in changes) {

        	
	        
            var each = changes[index];
            var field = map.fields[each.X][each.Y];

            if (!each.IsUnknown && field.isUnknown) {

                field[0].location.addClass('level-' + each.Levels.length + '0');

            	field.isUnknown = false;
            	if (each.Levels.length > 1) {

            	    for (var lindex in each.Levels) {
            	        if (lindex > 0) {
            	            var lev = $('<div class="level-' + each.Levels.length + lindex + '" />');
            	            var coins = $('<div class="coins" />');
            	            var pirates = $('<div class="pirates" />');
            	            field.location.append(lev);
	            	        field.locsize = each.Levels.length;
            	            lev.append(coins);
            	            lev.append(pirates);
            	            field[lindex] = {
            	                location: lev,
            	                coins: coins,
            	                pirates: pirates
            	            };
            	        }
            	    }
            	}
            }

            if (each.BackgroundImageSrc != null)
                field.back.css('backgroundImage', 'url(' + each.BackgroundImageSrc + ')');
            else {
                field.back.css('backgroundImage', '');
                field.back.css('backgroundColor', each.BackgroundColor);
            }

            if (each.Rotate == 1) {
                field.back.css('transform', 'rotate(90deg)');
            } else if (each.Rotate == 2) {
                field.back.css('transform', 'rotate(180deg)');
            } else if (each.Rotate == 3) {
                field.back.css('transform', 'rotate(270deg)');
            }



            for (var lindex in each.Levels) {

	            var level = field[lindex];

	            var lev = each.Levels[lindex];
		        if (lev.hasPirates) {

		        	level.pirates.css('backgroundColor', lev.Pirate.BackColor);
		        	level.pirates.text(lev.Pirate.Text);
		        } else {

		        	level.pirates.css('backgroundColor', '');
		        	level.pirates.text('');
		        }

		        if (lev.hasCoins) {
		        	level.coins.css('backgroundColor', lev.Coin.BackColor);
		        	level.coins.text(lev.Coin.Text);
		        } else {

		        	level.coins.css('backgroundColor', '');
		        	level.coins.text('');
		        }
            }

        }
    }



    var moves = [];

    function GetPiratesAvailability(avmoves) {
        
        var nums = 0;

        moves = avmoves;
        for (var index = 0 ; index < avmoves.length ; index++) {

            var move = avmoves[index];
            if (move.From.PirateNum == 3)
                nums |= 4;
            nums |= move.From.PirateNum;
        }

        if (nums & 1) {
            $('#first-pirate').show();
        } else $('#first-pirate').hide();
        if (nums & 2) {
            $('#second-pirate').show();
        } else $('#second-pirate').hide();
        if (nums & 4) {
            $('#third-pirate').show();
        } else $('#third-pirate').hide();

        return [nums & 1, nums & 2, nums & 4];
    }


    function GetWinner(teams) {

        var maxgold = 0;
        var winner;
        for (var index=0 ; index < teams.length ; index++) {
            var team = teams[index];
            if (team.gold > maxgold){
                maxgold = team.gold;
                winner = team.name;
            } else if (team.gold == maxgold) {
                winner += (" и " + team.name);
            }
        }
        return winner;
    }


    function RedrawStat(teams) {

        for (var index=0 ; index < teams.length ; index++) {
            var team = teams[index];

            groups.teams[team.id].gld.text(team.gold);
        }
    }

    /// =============================
    /// Отображение игроков на экране
    /// =============================
    function Teams(teams) {

        var teamsElm = $('#teams');
        if (typeof (teamsElm) == 'undefined') return;

        this.teams = {};

        for (var index in teams) {

            var team = teams[index];
            var row = $('<div class="row" />');

            var name = $('<div class="col-md-8" />');
            name.text(team.name);
            name.css('backgroundColor', team.backcolor);
            row.append(name);

            var elm = $('<div class="col-md-4" />');
            elm.css('backgroundColor', team.backcolor);
            var gld = $('<span class="badge"></span>');
            gld.text(team.gold);
            elm.append(gld);
            row.append(elm);

            this.teams[team.id] = {
                elm: name,
                gld: gld
            };
            teamsElm.append(row);
        }
    }



</script>